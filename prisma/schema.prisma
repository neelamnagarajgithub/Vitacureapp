datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  email     String    @unique
  firstName String
  lastName  String
  role      Role
  createdAt DateTime  @default(now())
  profile   Profile?
  patients  Patient[]
  reviewsGiven Review[] @relation("PatientReviews")
  reviewsReceived Review[] @relation("CaregiverReviews")
  userServices UserService[]
}

model Profile {
  id              Int     @id @default(autoincrement())
  userId          Int     @unique
  bio             String?
  experienceYears Int?
  certifications  String?
  hourlyRate      Float?
  availability    Json?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
}

model Patient {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  documents Document[]
  appointments Appointment[] @relation("PatientAppointments")
}

model Document {
  id          Int       @id @default(autoincrement())
  userId      Int
  type        String
  number      String
  expiryDate  DateTime?
  createdAt   DateTime  @default(now())
  patient     Patient?  @relation(fields: [userId], references: [id], map: "Document_patient_fkey")
}

model Service {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  userServices UserService[]
  appointments Appointment[]
}

model UserService {
  id        Int      @id @default(autoincrement())
  userId    Int
  serviceId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])
}

model Appointment {
  id              Int       @id @default(autoincrement())
  patientId       Int
  serviceId       Int
  appointmentDate DateTime
  durationHours   Int
  status          AppointmentStatus @default(PENDING)
  createdAt       DateTime @default(now())
  patient         Patient   @relation("PatientAppointments", fields: [patientId], references: [id])
  service         Service   @relation(fields: [serviceId], references: [id])
}

model Review {
  id          Int      @id @default(autoincrement())
  patientId   Int
  caregiverId Int
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  patient     User     @relation("PatientReviews", fields: [patientId], references: [id])
  caregiver   User     @relation("CaregiverReviews", fields: [caregiverId], references: [id])
}

enum Role {
  PATIENT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}